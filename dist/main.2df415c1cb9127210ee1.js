!function(e){function t(t){for(var n,u,c=t[0],f=t[1],a=t[2],p=0,l=[];p<c.length;p++)u=c[p],Object.prototype.hasOwnProperty.call(o,u)&&o[u]&&l.push(o[u][0]),o[u]=0;for(n in f)Object.prototype.hasOwnProperty.call(f,n)&&(e[n]=f[n]);for(s&&s(t);l.length;)l.shift()();return i.push.apply(i,a||[]),r()}function r(){for(var e,t=0;t<i.length;t++){for(var r=i[t],n=!0,c=1;c<r.length;c++){var f=r[c];0!==o[f]&&(n=!1)}n&&(i.splice(t--,1),e=u(u.s=r[0]))}return e}var n={},o={0:0},i=[];function u(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,u),r.l=!0,r.exports}u.m=e,u.c=n,u.d=function(e,t,r){u.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},u.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},u.t=function(e,t){if(1&t&&(e=u(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(u.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)u.d(r,n,function(t){return e[t]}.bind(null,n));return r},u.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return u.d(t,"a",t),t},u.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},u.p="";var c=window.webpackJsonp=window.webpackJsonp||[],f=c.push.bind(c);c.push=t,c=c.slice();for(var a=0;a<c.length;a++)t(c[a]);var s=f;i.push([49,1]),r()}({0:function(e,t,r){"use strict";(function(e,n){r.d(t,"a",function(){return m}),r.d(t,"b",function(){return g}),r.d(t,"c",function(){return b});var o,i,u="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:"undefined"!=typeof self?self:{};
/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */!function(e){!function(t){var r="object"==typeof u?u:"object"==typeof self?self:"object"==typeof this?this:Function("return this;")(),o=i(e);function i(e,t){return function(r,n){"function"!=typeof e[r]&&Object.defineProperty(e,r,{configurable:!0,writable:!0,value:n}),t&&t(r,n)}}void 0===r.Reflect?r.Reflect=e:o=i(r.Reflect,o),function(e){var t=Object.prototype.hasOwnProperty,r="function"==typeof Symbol,o=r&&void 0!==Symbol.toPrimitive?Symbol.toPrimitive:"@@toPrimitive",i=r&&void 0!==Symbol.iterator?Symbol.iterator:"@@iterator",u="function"==typeof Object.create,c={__proto__:[]}instanceof Array,f=!u&&!c,a={create:u?function(){return x(Object.create(null))}:c?function(){return x({__proto__:null})}:function(){return x({})},has:f?function(e,r){return t.call(e,r)}:function(e,t){return t in e},get:f?function(e,r){return t.call(e,r)?e[r]:void 0}:function(e,t){return e[t]}},s=Object.getPrototypeOf(Function),p="object"==typeof n&&n.env&&"true"===n.env.REFLECT_METADATA_USE_MAP_POLYFILL,l=p||"function"!=typeof Map||"function"!=typeof Map.prototype.entries?function(){var e={},t=[],r=function(){function e(e,t,r){this._index=0,this._keys=e,this._values=t,this._selector=r}return e.prototype["@@iterator"]=function(){return this},e.prototype[i]=function(){return this},e.prototype.next=function(){var e=this._index;if(e>=0&&e<this._keys.length){var r=this._selector(this._keys[e],this._values[e]);return e+1>=this._keys.length?(this._index=-1,this._keys=t,this._values=t):this._index++,{value:r,done:!1}}return{value:void 0,done:!0}},e.prototype.throw=function(e){throw this._index>=0&&(this._index=-1,this._keys=t,this._values=t),e},e.prototype.return=function(e){return this._index>=0&&(this._index=-1,this._keys=t,this._values=t),{value:e,done:!0}},e}();return function(){function t(){this._keys=[],this._values=[],this._cacheKey=e,this._cacheIndex=-2}return Object.defineProperty(t.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),t.prototype.has=function(e){return this._find(e,!1)>=0},t.prototype.get=function(e){var t=this._find(e,!1);return t>=0?this._values[t]:void 0},t.prototype.set=function(e,t){var r=this._find(e,!0);return this._values[r]=t,this},t.prototype.delete=function(t){var r=this._find(t,!1);if(r>=0){for(var n=this._keys.length,o=r+1;o<n;o++)this._keys[o-1]=this._keys[o],this._values[o-1]=this._values[o];return this._keys.length--,this._values.length--,t===this._cacheKey&&(this._cacheKey=e,this._cacheIndex=-2),!0}return!1},t.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=e,this._cacheIndex=-2},t.prototype.keys=function(){return new r(this._keys,this._values,n)},t.prototype.values=function(){return new r(this._keys,this._values,o)},t.prototype.entries=function(){return new r(this._keys,this._values,u)},t.prototype["@@iterator"]=function(){return this.entries()},t.prototype[i]=function(){return this.entries()},t.prototype._find=function(e,t){return this._cacheKey!==e&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=e)),this._cacheIndex<0&&t&&(this._cacheIndex=this._keys.length,this._keys.push(e),this._values.push(void 0)),this._cacheIndex},t}();function n(e,t){return e}function o(e,t){return t}function u(e,t){return[e,t]}}():Map,y=p||"function"!=typeof Set||"function"!=typeof Set.prototype.entries?function(){function e(){this._map=new l}return Object.defineProperty(e.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),e.prototype.has=function(e){return this._map.has(e)},e.prototype.add=function(e){return this._map.set(e,e),this},e.prototype.delete=function(e){return this._map.delete(e)},e.prototype.clear=function(){this._map.clear()},e.prototype.keys=function(){return this._map.keys()},e.prototype.values=function(){return this._map.values()},e.prototype.entries=function(){return this._map.entries()},e.prototype["@@iterator"]=function(){return this.keys()},e.prototype[i]=function(){return this.keys()},e}():Set,h=new(p||"function"!=typeof WeakMap?function(){var e=16,r=a.create(),n=o();return function(){function e(){this._key=o()}return e.prototype.has=function(e){var t=i(e,!1);return void 0!==t&&a.has(t,this._key)},e.prototype.get=function(e){var t=i(e,!1);return void 0!==t?a.get(t,this._key):void 0},e.prototype.set=function(e,t){return i(e,!0)[this._key]=t,this},e.prototype.delete=function(e){var t=i(e,!1);return void 0!==t&&delete t[this._key]},e.prototype.clear=function(){this._key=o()},e}();function o(){var e;do{e="@@WeakMap@@"+c()}while(a.has(r,e));return r[e]=!0,e}function i(e,r){if(!t.call(e,n)){if(!r)return;Object.defineProperty(e,n,{value:a.create()})}return e[n]}function u(e,t){for(var r=0;r<t;++r)e[r]=255*Math.random()|0;return e}function c(){var t,r=(t=e,"function"==typeof Uint8Array?"undefined"!=typeof crypto?crypto.getRandomValues(new Uint8Array(t)):"undefined"!=typeof msCrypto?msCrypto.getRandomValues(new Uint8Array(t)):u(new Uint8Array(t),t):u(new Array(t),t));r[6]=79&r[6]|64,r[8]=191&r[8]|128;for(var n="",o=0;o<e;++o){var i=r[o];4!==o&&6!==o&&8!==o||(n+="-"),i<16&&(n+="0"),n+=i.toString(16).toLowerCase()}return n}}():WeakMap);function d(e,t,r){var n=h.get(e);if(w(n)){if(!r)return;n=new l,h.set(e,n)}var o=n.get(t);if(w(o)){if(!r)return;o=new l,n.set(t,o)}return o}function v(e,t,r){var n=d(t,r,!1);return!w(n)&&!!n.has(e)}function g(e,t,r){var n=d(t,r,!1);if(!w(n))return n.get(e)}function _(e,t,r,n){d(r,n,!0).set(e,t)}function b(e,t){var r=[],n=d(e,t,!1);if(w(n))return r;for(var o=function(e){var t=T(e,i);if(!E(t))throw new TypeError;var r=t.call(e);if(!S(r))throw new TypeError;return r}(n.keys()),u=0;;){var c=M(o);if(!c)return r.length=u,r;var f=c.value;try{r[u]=f}catch(e){try{N(o)}finally{throw e}}u++}}function m(e){if(null===e)return 1;switch(typeof e){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return null===e?1:6;default:return 6}}function w(e){return void 0===e}function O(e){return null===e}function S(e){return"object"==typeof e?null!==e:"function"==typeof e}function R(e,t){switch(m(e)){case 0:case 1:case 2:case 3:case 4:case 5:return e}var r=3===t?"string":5===t?"number":"default",n=T(e,o);if(void 0!==n){var i=n.call(e,r);if(S(i))throw new TypeError;return i}return function(e,t){if("string"===t){var r=e.toString;if(E(r))if(!S(o=r.call(e)))return o;if(E(n=e.valueOf))if(!S(o=n.call(e)))return o}else{var n;if(E(n=e.valueOf))if(!S(o=n.call(e)))return o;var o,i=e.toString;if(E(i))if(!S(o=i.call(e)))return o}throw new TypeError}(e,"default"===r?"number":r)}function j(e){var t=R(e,3);return"symbol"==typeof t?t:function(e){return""+e}(t)}function P(e){return Array.isArray?Array.isArray(e):e instanceof Object?e instanceof Array:"[object Array]"===Object.prototype.toString.call(e)}function E(e){return"function"==typeof e}function k(e){return"function"==typeof e}function T(e,t){var r=e[t];if(null!=r){if(!E(r))throw new TypeError;return r}}function M(e){var t=e.next();return!t.done&&t}function N(e){var t=e.return;t&&t.call(e)}function J(e){var t=Object.getPrototypeOf(e);if("function"!=typeof e||e===s)return t;if(t!==s)return t;var r=e.prototype,n=r&&Object.getPrototypeOf(r);if(null==n||n===Object.prototype)return t;var o=n.constructor;return"function"!=typeof o?t:o===e?t:o}function x(e){return e.__=void 0,delete e.__,e}e("decorate",function(e,t,r,n){if(w(r)){if(!P(e))throw new TypeError;if(!k(t))throw new TypeError;return function(e,t){for(var r=e.length-1;r>=0;--r){var n=(0,e[r])(t);if(!w(n)&&!O(n)){if(!k(n))throw new TypeError;t=n}}return t}(e,t)}if(!P(e))throw new TypeError;if(!S(t))throw new TypeError;if(!S(n)&&!w(n)&&!O(n))throw new TypeError;return O(n)&&(n=void 0),function(e,t,r,n){for(var o=e.length-1;o>=0;--o){var i=(0,e[o])(t,r,n);if(!w(i)&&!O(i)){if(!S(i))throw new TypeError;n=i}}return n}(e,t,r=j(r),n)}),e("metadata",function(e,t){return function(r,n){if(!S(r))throw new TypeError;if(!w(n)&&!function(e){switch(m(e)){case 3:case 4:return!0;default:return!1}}(n))throw new TypeError;_(e,t,r,n)}}),e("defineMetadata",function(e,t,r,n){if(!S(r))throw new TypeError;return w(n)||(n=j(n)),_(e,t,r,n)}),e("hasMetadata",function(e,t,r){if(!S(t))throw new TypeError;return w(r)||(r=j(r)),function e(t,r,n){var o=v(t,r,n);if(o)return!0;var i=J(r);if(!O(i))return e(t,i,n);return!1}(e,t,r)}),e("hasOwnMetadata",function(e,t,r){if(!S(t))throw new TypeError;return w(r)||(r=j(r)),v(e,t,r)}),e("getMetadata",function(e,t,r){if(!S(t))throw new TypeError;return w(r)||(r=j(r)),function e(t,r,n){var o=v(t,r,n);if(o)return g(t,r,n);var i=J(r);if(!O(i))return e(t,i,n);return}(e,t,r)}),e("getOwnMetadata",function(e,t,r){if(!S(t))throw new TypeError;return w(r)||(r=j(r)),g(e,t,r)}),e("getMetadataKeys",function(e,t){if(!S(e))throw new TypeError;return w(t)||(t=j(t)),function e(t,r){var n=b(t,r);var o=J(t);if(null===o)return n;var i=e(o,r);if(i.length<=0)return n;if(n.length<=0)return i;var u=new y;var c=[];for(var f=0,a=n;f<a.length;f++){var s=a[f];u.has(s)||(u.add(s),c.push(s))}for(var p=0,l=i;p<l.length;p++){s=l[p];u.has(s)||(u.add(s),c.push(s))}return c}(e,t)}),e("getOwnMetadataKeys",function(e,t){if(!S(e))throw new TypeError;return w(t)||(t=j(t)),b(e,t)}),e("deleteMetadata",function(e,t,r){if(!S(t))throw new TypeError;w(r)||(r=j(r));var n=d(t,r,!1);if(w(n))return!1;if(!n.delete(e))return!1;if(n.size>0)return!0;var o=h.get(t);return o.delete(r),o.size>0||(h.delete(t),!0)})}(o)}()}(o||(o={})),function(e){e.TYPE="design:type",e.JSON_SCHEMA="tabbouleh:schema",e.JSON_PROPERTY="tabbouleh:property",e.JSON_REFERENCE="tabbouleh:references"}(i||(i={}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var c=function(e,t){return(c=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)};var f=function(){return(f=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},a=function(){function e(){}return e.getJSONSchemaType=function(e){switch(e){case Array:return{type:"array"};case Number:return{type:"number"};case String:return{type:"string"};case Object:return{type:"object"};default:return{type:"null"}}},e.getJSONPropertySchema=function(t,r,n){var o=f({},t,r);if(o.$ref)return o;var i=e.getJSONSchemaType(n);return f({},i,o)},e.getReflectProperties=function(e){return Reflect.getMetadata(i.JSON_PROPERTY,e)||{}},e.setReflectProperties=function(e,t){Reflect.defineMetadata(i.JSON_PROPERTY,t,e)},e.defineReflectProperties=function(t,r,n){var o=e.getReflectProperties(t),u=Reflect.getMetadata(i.JSON_SCHEMA,t,r)||{},c=Reflect.getMetadata(i.TYPE,t,r),a=e.getJSONPropertySchema(u,n,c);o[r]=f({},o[r]||{},a),e.setReflectProperties(t,o)},e}(),s=function(e){return"Class called by Tabbouleh but not decorated with @JSONSchema: "+e},p=function(e){function t(r){var n=e.call(this,s(r&&r.name?r.name:r))||this;return Error.call(n),Error.captureStackTrace(n,n.constructor),Object.setPrototypeOf(n,t.prototype),n}return function(e,t){function r(){this.constructor=e}c(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}(t,e),t}(Error),l=function(e){return e&&e.name&&e.prototype},y=function(){function e(){}return e.computeJSONReferences=function(t,r,n){var o=!n;if(n=n||t,!r){var i=h.getReflectSchema(n)||{};r=i.definitions||{}}e.getReferences(t.name,t.prototype).forEach(function(o){var i,u=o.targetFn();if(!l(u))throw new p(u);if(u!==n){var c=e.generateSchemaID(u);r[c]||(r[c]=h.getComputedJSONSchema(u,r,n))}var f={$ref:e.generateRef(u,n)},s=o.jsonPropertyKey?((i={})[o.jsonPropertyKey]=f,i):f;a.defineReflectProperties(t.prototype,o.key,s)}),Object.keys(r).length&&o&&h.defineReflectSchema(n,{definitions:r})},e.addReference=function(t,r,n,o){var i=t.constructor.name,u={className:i,key:r,jsonPropertyKey:n,targetFn:o},c=e.getReflectReference(t)||{},f=c[i]||[];f=f.filter(function(e){return e.key!==u.key||e.jsonPropertyKey!==u.jsonPropertyKey}),c[i]=f,f.push(u),e.setReflectReference(t,c)},e.getReferences=function(t,r){return(e.getReflectReference(r)||{})[t]||[]},e.generateRef=function(t,r){return t===r?"#":"#/definitions/"+e.generateSchemaID(t)},e.generateSchemaID=function(e){return"_"+e.name+"_"},e.getReflectReference=function(e){return Reflect.getMetadata(i.JSON_REFERENCE,e)},e.setReflectReference=function(e,t){Reflect.defineMetadata(i.JSON_REFERENCE,t,e)},e}(),h=function(){function e(){}return e.getComputedJSONSchema=function(t,r,n){y.computeJSONReferences(t,r,n);var o=e.getReflectSchema(t);if(!o)throw new p(t);return o.properties=a.getReflectProperties(t.prototype),o},e.defineReflectSchema=function(t,r){var n=e.getReflectSchema(t)||a.getJSONPropertySchema({},{},Object);Object.assign(n,r),e.setReflectSchema(t,n)},e.getReflectSchema=function(e){return Reflect.getMetadata(i.JSON_SCHEMA,e.prototype)},e.setReflectSchema=function(e,t){Reflect.defineMetadata(i.JSON_SCHEMA,t,e.prototype)},e}(),d=function(){function e(){}return e.generateJSONSchema=function(e){return h.getComputedJSONSchema(e)},e.generateMultipleJSONSchemas=function(t){for(var r={},n=0,o=Object.keys(t);n<o.length;n++){var i=o[n],u=t[i];r[i]=e.generateJSONSchema(u)}return r},e}(),v=function(e){return void 0===e&&(e={}),function(t){h.defineReflectSchema(t,e)}};function g(e){if("object"==typeof e)return v(e);v()(e)}var _=function(){function e(){}return e.defineProperties=function(t,r){if(1===t.length){var n=t[0];return e.compute(r,n)}var o=t[0],i=t[1];e.compute(r)(o,i)},e.compute=function(e,t){return void 0===t&&(t={}),t=f({},e,t),function(e,r,n){var o={};Object.keys(t).forEach(function(n){var i=n,u=t[i];"function"==typeof u?y.addReference(e,r,i,u):o[i]=u}),a.defineReflectProperties(e,r,o)}},e}();function b(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return _.defineProperties(e,{type:"string"})}function m(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 1===e.length&&"function"==typeof e[0]?function(t,r,n){var o=e[0];y.addReference(t,r,null,o)}:_.defineProperties(e,{type:"object"})}t.d=d}).call(this,r(14),r(15))},49:function(e,t,r){"use strict";r.r(t);var n=r(0),o=r(13),i=r.n(o),u=function(e,t,r,n){var o,i=arguments.length,u=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(e,t,r,n);else for(var c=e.length-1;c>=0;c--)(o=e[c])&&(u=(i<3?o(u):i>3?o(t,r,u):o(t,r))||u);return i>3&&u&&Object.defineProperty(t,r,u),u},c=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},f=function(){function e(){}return u([n.c,c("design:type",String)],e.prototype,"street",void 0),u([n.c,c("design:type",String)],e.prototype,"city",void 0),e=u([Object(n.b)({required:["street","city"]})],e)}(),a=function(e,t,r,n){var o,i=arguments.length,u=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(e,t,r,n);else for(var c=e.length-1;c>=0;c--)(o=e[c])&&(u=(i<3?o(u):i>3?o(t,r,u):o(t,r))||u);return i>3&&u&&Object.defineProperty(t,r,u),u},s=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},p=function(){function e(){}return a([Object(n.a)(function(){return f}),s("design:type",f)],e.prototype,"address",void 0),e=a([Object(n.b)({required:["name","age","address"]})],e)}(),l=document.getElementById("schema-output"),y=document.getElementById("data-input"),h=document.getElementById("state-output");function d(e){h.classList.remove("success"),h.classList.add("error"),h.innerHTML="<br/><br/>"+e.map(function(e){return e.dataPath+" => "+e.message}).join("<br/>")}function v(e,t){try{var r=t(JSON.parse(e));console.log(r),r.valid?(h.classList.remove("error"),h.classList.add("success")):d(r.errors)}catch(e){console.error(e),d([{dataPath:e.name,message:e.message}])}}var g=n.d.generateJSONSchema(p);console.log(g);var _=(new i.a).compile(g);!function(e,t,r){l.innerText=JSON.stringify(e,void 0,"\t"),y.onkeyup=function(e){v(e.currentTarget.value,r)},y.value=JSON.stringify(t,void 0,"\t"),v(y.value,r)}(g,{name:"Toto",age:28,address:{city:"Paris",street:"56 rue Saint Martin"}},function(e){return{valid:_(e),errors:_.errors||[]}})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,